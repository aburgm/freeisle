#pragma once

#include "def/ContainerDef.hh"
#include "def/Location.hh"
#include "def/UnitDef.hh"

#include <string>

namespace freeisle::def {

/**
 * Represents a shop somewhere on the map.
 */
struct ShopDef {
  // noncopyable--can't guarantee that pointers to UnitDefs are
  // going to be same.
  ShopDef(const ShopDef &) = delete;
  ShopDef(ShopDef &&) = delete;
  ShopDef &operator=(const ShopDef &) = delete;
  ShopDef &operator=(ShopDef &&) = delete;

  /**
   * Specifies the type of shop.
   */
  enum class Type {
    HQ,
    Town,
    Factory,
    Harbour,
    Airport,
  };

  /**
   * (Unique) name of the shop.
   */
  std::string name;

  /**
   * Type of the shop.
   */
  Type type;

  /**
   * Income generated by the shop. The shop's owner will receive this much
   * wealth every turn.
   */
  uint32_t income;

  /**
   * Container definition for the shop, specifying what kind of units and
   * how many units can be contained in it.
   */
  ContainerDef container;

  /**
   * List of units that can be produced in the shop.
   */
  std::vector<const UnitDef *> productionList;

  /**
   * Location of the shop on the map.
   */
  Location location;
};

} // namespace freeisle::def
