#pragma once

#include "def/Collection.hh"
#include "def/ContainerDef.hh"
#include "def/Location.hh"
#include "def/UnitDef.hh"

#include <string>

namespace freeisle::def {

/**
 * Represents a shop somewhere on the map.
 */
struct ShopDef {
  /**
   * Specifies the type of shop.
   */
  enum class Type {
    HQ,
    Town,
    Factory,
    Harbor,
    Airport,
  };

  /**
   * (Unique) name of the shop.
   */
  std::string name;

  /**
   * Type of the shop.
   */
  Type type;

  /**
   * Income generated by the shop. The shop's owner will receive this much
   * wealth every turn.
   */
  uint32_t income;

  /**
   * Container definition for the shop, specifying what kind of units and
   * how many units can be contained in it.
   */
  ContainerDef container;

  /**
   * List of units that can be produced in the shop.
   */
  RefSet<UnitDef> production_list;

  /**
   * Location of the shop on the map.
   */
  Location location;
};

constexpr core::EnumEntry<ShopDef::Type> ShopDefTypes[] = {
    {ShopDef::Type::HQ, "hq"},           {ShopDef::Type::Town, "town"},
    {ShopDef::Type::Factory, "factory"}, {ShopDef::Type::Harbor, "harbor"},
    {ShopDef::Type::Airport, "airport"},
};

} // namespace freeisle::def
